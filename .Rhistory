library(glmmTMB)
library(R.matlab)
library(tidyverse); library(reshape2)
setwd("/Users/kaankeskin/projects/sch_pe/external/R/alpha_bayesian.R")
setwd("/Users/kaankeskin/projects/sch_pe/")
alpha_mat <- readMat("./results/models/alpha_matrix.mat")
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
dat <- readMat("./data/processed/normalized_pe_array2.mat")
convert_to_long <- function(dat, group,subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat <- dat[-c(9, 44), ]
pe_mat <- dat[,1:60]
group <- group
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
age <- as.numeric(subj_table$age)
doi <- as.numeric(subj_table$DoI)
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
# Add Age information (repeat for each trial)
long_pe$Age <- rep(age, each = ncol(pe_mat))
# Add DoI information (repeat for each trial)
long_pe$DoI <- rep(doi, each = ncol(pe_mat))
return(long_pe)
}
# Frequentist statistics
library(glmmTMB)
# Ensure PE is strictly between 0 and 1
alpha_long$PE <- pmin(pmax(alpha_long$PE, 1e-6), 1 - 1e-6)
# Convert Group and Task to factors if not already
alpha_long$Group <- factor(alpha_long$Group, labels = c("HC", "SZ"))
alpha_long <- convert_to_long(alpha_mat$alpha.matrix, dat$merged.matrix[-c(9, 44),61], subj_table, TRUE)
alpha_long$PE_logit <- qlogis(alpha_long$PE)  # qlogis = logit function
# Frequentist statistics
library(glmmTMB)
# Ensure PE is strictly between 0 and 1
alpha_long$PE <- pmin(pmax(alpha_long$PE, 1e-6), 1 - 1e-6)
# Convert Group and Task to factors if not already
alpha_long$Group <- factor(alpha_long$Group, labels = c("HC", "SZ"))
alpha_long$Task <- factor(alpha_long$Task)
# Fit the Beta model
fit_glmm <- glmmTMB(
PE ~ Task * Group + (1 + Task | Subject),
data = alpha_long,
family = beta_family(link = "logit")
)
fit_glmm <- glmmTMB(
PE ~ Task * Group + (1 | Subject),
data = alpha_long,
family = beta_family(link = "logit")
)
fit_glmm <- glmmTMB(
PE ~ Task * Group + (1 | Subject),
data = alpha_long,
family = beta_family(link = "logit")
)
fit_glmm
summary(fit_glmm)
st
fit_glmm <- glmmTMB(
PE ~ Task + Group * Sex + DoI + (1 | Subject),
data = alpha_long,
family = beta_family(link = "logit")
)
summary(fit_glmm)
library(performance)
icc(fit_glmm)
library(car)
vif(fit_glmm)
library(car)
fit_fixed <- glm(PE ~ Task + Group * Sex + DoI, family = binomial(link = "logit"), data = alpha_long)
vif(fit_fixed)
vif_values <- vif(fit_fixed)
sqrt(vif_values[, "GVIF^(1/(2*Df))"])  # to interpret like standard VIF
### Model Diagnostics ####
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(fit_glmm)
# Plot residual diagnostics
plot(sim_res)
# Fit the Beta model
fit_glmm <- glmmTMB(
PE ~ Task + Group * Sex + DoI + (1 | Subject),
data = alpha_long,
family = beta_family(link = "logit")
)
summary(fit_glmm)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(fit_glmm)
# Plot residual diagnostics
plot(sim_res)
# Fit the Beta model
fit_glmm <- glmmTMB(
PE ~ Task + Group * Sex + DoI + (1 | Subject),
data = alpha_long,
family = gaussian(link = "logit")
)
summary(fit_glmm)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(fit_glmm)
# Plot residual diagnostics
plot(sim_res)
alpha_long$PE_adj <- pmin(pmax(alpha_long$PE, 1e-6), 1 - 1e-6)
# Logit transform
alpha_long$PE_logit <- qlogis(alpha_long$PE_adj)  # same as log(PE / (1 - PE))
fit_glmm <- glmmTMB(
PE_logit ~ Task + Group * Sex + DoI + (1 | Subject),
data = alpha_long,
family = gaussian()
)
summary(fit_glmm)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(fit_glmm)
# Plot residual diagnostics
plot(sim_res)
# Fit the Beta model
fit_glmm <- glmmTMB(
PE ~ Task + Group * Sex + DoI + (1 | Subject),
data = alpha_long,
family = gaussian(link = "logit")
)
summary(fit_glmm)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(fit_glmm)
# Plot residual diagnostics
plot(sim_res)
library(performance)
icc(fit_glmm)
library(car)
vif(fit_glmm)
