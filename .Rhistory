dat_list$ACW <- dat$ACW0.GS.replication
dat_list$GSCORR <- dat$GSCORR.GS.replication
level_list = list()
ylab_list = list()
parts=c("myelin", "ACW", "GSCORR")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[3]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Myelin")
ylab_list[[parts[2]]] = c("ACW")
ylab_list[[parts[3]]] = c("GSCORR")
empirical <- calculate_prs(dat_list, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "", ylab_size= 12, method = "rowMeans")
ggpubr::ggarrange(plotlist = empirical$interaction_plots, nrow = 1, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/empirical.png"),height = 400, width = 1200, res= 150)
library(tidyverse)
dat_list$myelin <- dat$myelin.replication
dat_list$ACW <- dat$ACW0.GS.replication
dat_list$GSCORR <- dat$GSCORR.GS.replication
level_list = list()
ylab_list = list()
parts=c("myelin", "ACW", "GSCORR")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[3]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Myelin")
ylab_list[[parts[2]]] = c("ACW")
ylab_list[[parts[3]]] = c("GSCORR")
empirical <- calculate_prs(dat_list, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "", ylab_size= 12, method = "rowMeans")
ggpubr::ggarrange(plotlist = empirical$interaction_plots, nrow = 1, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/empirical.png"),height = 400, width = 1200, res= 150)
source_folder = "/Users/kaankeskin/projects/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
image4 <- image_read(file4) %>% image_resize(geometry = "1200x")
image_w <- image_blank(width=1200, height = 200, color = "white")
fig_5_merged <- image_append(c(image3,image_w, image4), stack = TRUE)
png(paste0(source_folder,"FIGURES/fig_5_new3.png"), width = 1200, height = 1400, res = 150)
plot(fig_5_merged)
text(x = 0, y = 1350, labels = "A", xpd = NA, cex=1.5, font=2)
text(x = 0, y = 750, labels = "B", xpd = NA, cex=1.5, font=2)
text(x = 550, y = 1400, labels = "Empirical Results", xpd = NA, cex=1.5, font=1)
text(x = 550, y = 850, labels = "Simulation Results", xpd = NA, cex=1.5, font=1)
text(x = 0, y = 400, labels = "C", xpd = NA, cex=1.5, font=2)
dev.off()
citation()
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
library(magick)
library(tidyverse)
# 1. Read your image
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
# 2. Get its dimensions
info <- image_info(img)
orig_width  <- info$width
orig_height <- info$height
# 3. Compute the size of the square (the larger of width/height)
square_size <- max(orig_width, orig_height)
# 4. Extend the canvas to square_size × square_size,
#    centering the original and padding with white
square_img <- image_extent(
img,
geometry = paste0(square_size, "x", square_size),
color    = "white",
gravity  = "center"
)
square_img %>%
# 5. Save or display
image_write(square_img, "C:/Users/kaank/Downloads/photo_square.jpg")
library(magick)
library(tidyverse)
# 1. Read your image
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
# 2. Get its dimensions
info <- image_info(img)
orig_width  <- info$width
orig_height <- info$height
# 3. Compute the size of the square (the larger of width/height)
square_size <- max(orig_width, orig_height)
# 4. Extend the canvas to square_size × square_size,
#    centering the original and padding with white
square_img <- image_extent(
img,
geometry = paste0(square_size, "x", square_size),
color    = "white",
gravity  = "center"
)
square_img %>%
# 5. Save or display
image_write(square_img, "C:/Users/kaank/Downloads/photo_square.jpg")
library(magick)
library(tidyverse)
# 1. Read your image
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
# 2. Get its dimensions
info <- image_info(img)
orig_width  <- info$width
orig_height <- info$height
# 3. Compute the size of the square (the larger of width/height)
square_size <- max(orig_width, orig_height)
# 4. Extend the canvas to square_size × square_size,
#    centering the original and padding with white
square_img <- image_extent(
img,
geometry = paste0(square_size, "x", square_size),
color    = "white",
gravity  = "center"
)
square_img %>%
# 5. Save or display
image_write(square_img, "C:/Users/kaank/Downloads/photo_square.jpg")
library(magick)
library(tidyverse)
# 1. Read your image
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
# 2. Get its dimensions
info <- image_info(img)
orig_width  <- info$width
orig_height <- info$height
# 3. Compute the size of the square (the larger of width/height)
square_size <- max(orig_width, orig_height)
# 4. Extend the canvas to square_size × square_size,
#    centering the original and padding with white
square_img <- image_extent(
img,
geometry = paste0(square_size, "x", square_size),
color    = "white",
gravity  = "center"
)
square_img %>%
# 5. Save or display
image_write(square_img, "C:/Users/kaank/Downloads/photo_square.jpg")
library(magick)
library(tidyverse)
# 1. Read your image
img <- image_read("C:/Users/kaank/Downloads/ask.jpg")
img
info <- image_info(img)
orig_width  <- info$width
orig_height <- info$height
# 3. Compute the size of the square (the larger of width/height)
square_size <- max(orig_width, orig_height)
# 4. Extend the canvas to square_size × square_size,
#    centering the original and padding with white
square_img <- image_extent(
img,
geometry = paste0(square_size, "x", square_size),
color    = "white",
gravity  = "center"
)
square_img %>%
# 5. Save or display
image_write(square_img, "C:/Users/kaank/Downloads/photo_square.jpg")
dpi       <- 300
inch_size <- 1.9
px        <- dpi * inch_size   # 900 px
# 3. Resize to 900×900 pixels…
square_resized <- image_resize(square_img, geometry = sprintf("%dx%d", px, px))
# 5. Write out
image_write(square_resized, path = "C:/Users/kaank/Downloads/son_square.jpg", density="300x300")
# install.packages("magick")
library(magick)
# Read multiple PNG files (change the pattern to your needs)
files <- list(
"D:/SoCAT/ElifOzgeSCH/SCHdata/analysis/secondlevel/Cov_HC_oneSampleT_0030/hc_uncorr.png",
"D:/SoCAT/ElifOzgeSCH/SCHdata/analysis/secondlevel/Cov_SZ_oneSampleT_0030/cov_sz.png",
"D:/SoCAT/ElifOzgeSCH/SCHdata/analysis/secondlevel/Cov_twoSampleT_0030/sz_hc_cov.png"
)
# Read all images
imgs <- lapply(files, image_read)
# Combine into a single magick image object
imgs_joined <- image_append(image_join(imgs), stack = FALSE)
# stack = FALSE → horizontal, stack = TRUE → vertical
imgs_joined
imgs <- lapply(imgs, image_resize, "x800")
# Combine into a single magick image object
imgs_joined <- image_append(image_join(imgs), stack = FALSE)
imgs_joined
# Labels for each image
labels <- c("A", "B", "C")  # same length as imgs
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+30+30",       # offset from top-left in pixels
color = "black",
boxcolor = "white")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+30+30",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+0+0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Labels for each image
headers <- c("HC", "SZ", "SZ > HC")  # same length as imgs
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0+0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0+30",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-30",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-50",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-50",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-100",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-70",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
# Merge horizontally
merged <- image_append(image_join(imgs_headed), stack = FALSE)
merged
3378/3
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 20, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(im, black_rect), stack = TRUE))
imgs
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 40, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(im, black_rect), stack = TRUE))
# Labels for each image
labels <- c("A", "B", "C")  # same length as imgs
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+0+0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 100, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(im, black_rect), stack = TRUE))
# Labels for each image
labels <- c("A", "B", "C")  # same length as imgs
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+0+0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Labels for each image
headers <- c("HC", "SZ", "SZ > HC")  # same length as imgs
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-70",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
imgs_headed
image_append(image_join(imgs_headed), stack = FALSE)
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 100, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(im, black_rect), stack = TRUE))
# Labels for each image
imgs[[1]]
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 500, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(im, black_rect), stack = TRUE))
imgs[[1]]
# Read all images
imgs <- lapply(files, image_read)
imgs <- lapply(imgs, image_resize, "x800")
# Create a black rectangle
black_rect <- image_blank(width = 1126, height = 100, color = "black")
imgs <- lapply(imgs, function(im) image_append(c(black_rect,im),stack = TRUE))
imgs[[1]]
# Labels for each image
labels <- c("A", "B", "C")  # same length as imgs
# Add labels (top-left corner)
imgs_labeled <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "NorthWest",     # top-left
location = "+0+0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs, labels, SIMPLIFY = FALSE)
merged <- image_append(image_join(imgs_labeled), stack = FALSE)
merged
# Labels for each image
headers <- c("HC", "SZ", "SZ > HC")  # same length as imgs
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-70",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
image_append(image_join(imgs_headed), stack = FALSE)
headers <- c("HC", "SZ", "SZ > HC")  # same length as imgs
imgs_headed <- mapply(function(img, label) {
image_annotate(img,
text = label,
size = 80,                 # font size
gravity = "North",     # top-left
location = "+0-0",       # offset from top-left in pixels
color = "white",
boxcolor = "black")        # optional background box
}, imgs_labeled, headers, SIMPLIFY = FALSE)
image_append(image_join(imgs_headed), stack = FALSE)
# Save to disk
image_write(merged,
path = "C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/results/figures/brain_plot.png",
format = "png")
merged <- image_append(image_join(imgs_headed), stack = FALSE)
# Save to disk
image_write(merged,
path = "C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/results/figures/brain_plot.png",
format = "png")
library(R.matlab); library(tidyverse); library(reshape2)
#setwd("/Users/kaankeskin/projects/sch_pe/")
# Microsoft
setwd("C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/")
dat <- readxl::read_xlsx("./data/raw/DataElif.xlsx")
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subj_table[complete.cases(subj_table[, c(
"PANSS.Total","SANS","CDSS","SCORS.GA","OSCARS.TA","FROGS"
)]),
]
varsToNum <- c("age", "ap", "AgeOfOnset", "DoI", "PANSS.Total",
"SANS", "CDSS","SCORS.GA","OSCARS.TA","FROGS")
# First trim whitespace
subj_table[varsToNum] <- lapply(subj_table[varsToNum], function(x) as.numeric(trimws(x)))
df_sz <- subj_table[subj_table$group==1, ]
df_sz <- df_sz[order(df_sz$name),]
dat_sz <- dat %>% filter(Dx==1
) %>% arrange(NameSurname
) %>% filter(!is.na(subj))
pe <- readMat("./data/processed/normalized_pe_array2.mat")
convert_to_long <- function(dat, subj_table) {
# Extract PE matrix (first 60 columns) and group information (column 61)
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
pe_long <- convert_to_long(pe,subj_table = subj_table)
pe_long
library(rstatix);library(tidyverse)
subj_table %>%
slice(-c(9, 44)) %>%
filter(group == 1) %>%
filter(!is.na(PANSS.Total)) %>%
rstatix::t_test(PANSS.Total ~ sex)
# Clean and filter the data first
filtered_data <- subj_table %>%
mutate(
education = as.numeric(education),
marriage = as.numeric(marriage)
) %>%
slice(-c(9, 39, 44, 74)) %>%
filter(group == 1)
# Specify outcome variables you want to test
outcomes <- c("PANSS.Total", "SANS", "CDSS", "SCORS.GA","OSCARS.TA","FROGS")
# Reshape and run t-tests
filtered_data %>%
select(sex, all_of(outcomes)) %>%
pivot_longer(cols = -sex, names_to = "variable", values_to = "value") %>%
drop_na() %>%
group_by(variable) %>%
t_test(value ~ sex) %>%
adjust_pvalue(method = "bonferroni")
