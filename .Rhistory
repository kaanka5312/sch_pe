long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
dat <- list(readMat("./data/processed/normalized_pe_array2.mat"), # Cemre RW PE
readMat("./data/processed/x2_array.mat"), # HGF X2
readMat("./data/processed/x3_array.mat"), # HGF X3
readMat("./data/processed/x2_pe_array.mat"), # HGF low level PE
readMat("./data/processed/x3_pe_array.mat"), # HGF high level PE
readMat("./data/processed/alfa2_array.mat"), # learning rate level 2
readMat("./data/processed/alfa3_array.mat"), # learning rate level 3
readMat("./data/processed/rw_pe.mat") # RW model PE from TAPAS
)
library(R.matlab); library(tidyverse); library(reshape2)
#setwd("/Users/kaankeskin/projects/sch_pe/")
# Microsoft
setwd("C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/")
#
dat <- list(readMat("./data/processed/normalized_pe_array2.mat"), # Cemre RW PE
readMat("./data/processed/x2_array.mat"), # HGF X2
readMat("./data/processed/x3_array.mat"), # HGF X3
readMat("./data/processed/x2_pe_array.mat"), # HGF low level PE
readMat("./data/processed/x3_pe_array.mat"), # HGF high level PE
readMat("./data/processed/alfa2_array.mat"), # learning rate level 2
readMat("./data/processed/alfa3_array.mat"), # learning rate level 3
readMat("./data/processed/rw_pe.mat") # RW model PE from TAPAS
)
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
convert_to_long <- function(dat, subj_table) {
# Extract PE matrix (first 60 columns) and group information (column 61)
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
dat{{1}}
dat[[1]]
dim(dat[[1]])
nrow(dat[[1]])
nrow(dat[[1]])
nrow(dat[[1]]$merged.matrix)
ncol(dat[[1]]$merged.matrix)
convert_to_long <- function(dat, subj_table) {
# Extract PE matrix (first 60 columns) and group information (column 61)
pe_mat <- dat$merged.matrix[-c(9,44),1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
View(subj_table)
dat$merged.matrix[,1:60]
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
convert_to_long <- function(dat, subj_table) {
# Extract PE matrix (first 60 columns) and group information (column 61)
dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
long_pe_list[[1]]
convert_to_long <- function(dat, subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
subj_table$age
subj_table$DoI
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
convert_to_long <- function(dat, subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
age <- subj_table$age
doi <- subj_table$DoI
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
long_pe_list[[1]]$logPE <- log(long_pe_list[[1]]$PE_shifted)
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + abs(min(long_pe_list[[1]]$PE)) + 0.25
long_pe_list[[1]]$logPE <- log(long_pe_list[[1]]$PE_shifted)
str(long_pe_list[[1]])
convert_to_long <- function(dat, subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
age <- subj_table$age
doi <- subj_table$DoI
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
str(long_pe_list[[1]])
convert_to_long <- function(dat, subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
age <- subj_table$age
doi <- subj_table$DoI
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
# Add Age information (repeat for each trial)
long_pe$Age <- rep(age, each = ncol(pe_mat))
# Add DoI information (repeat for each trial)
long_pe$DoI <- rep(doi, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
str(long_pe_list[[1]])
as.numeric(subj_table$age)
as.numeric(subj_table$DoI)
subj_table$DoI
subj_table$age
as.numeric(subj_table$age)
subj_table$DoI
as.numeric(subj_table$DoI)
setwd("C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/")
#
dat <- list(readMat("./data/processed/normalized_pe_array2.mat"), # Cemre RW PE
readMat("./data/processed/x2_array.mat"), # HGF X2
readMat("./data/processed/x3_array.mat"), # HGF X3
readMat("./data/processed/x2_pe_array.mat"), # HGF low level PE
readMat("./data/processed/x3_pe_array.mat"), # HGF high level PE
readMat("./data/processed/alfa2_array.mat"), # learning rate level 2
readMat("./data/processed/alfa3_array.mat"), # learning rate level 3
readMat("./data/processed/rw_pe.mat") # RW model PE from TAPAS
)
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
convert_to_long <- function(dat, subj_table, exclude=TRUE) {
# Extract PE matrix (first 60 columns) and group information (column 61)
if (exclude) dat$merged.matrix <- dat$merged.matrix[-c(9, 44), ]
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
age <- as.numeric(subj_table$age)
doi <- as.numeric(subj_table$DoI)
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
# Add Age information (repeat for each trial)
long_pe$Age <- rep(age, each = ncol(pe_mat))
# Add DoI information (repeat for each trial)
long_pe$DoI <- rep(doi, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
str(long_pe_list[[1]])
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + abs(min(long_pe_list[[1]]$PE)) + 0.25
long_pe_list[[1]]$logPE <- log(long_pe_list[[1]]$PE_shifted)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject) + Age + Sex + DoI, data = long_pe_list[[1]])
library(lme4)
library(lmerTest)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject) + Age + Sex + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + Age + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
lognormal_model <- lmer(logPE ~ Group * Sex * DoI + Task + (1 | Subject) + Age, data = long_pe_list[[1]])
summary(lognormal_model)
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + Age + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
T_raw <- read.csv("./data/raw/response.csv")
T_raw
subj_table$task.id
View(subj_table)
subj_table$task.id
T_raw <- read.csv("./data/raw/response.csv")
T <- T_raw[T_raw$denekId %in% subj_table$task.id,]
T_aslihan <- read.csv("./data/processed/aslihan_filtered.csv")
T <- rbind(T,T_aslihan)
# Control the number of subject
#sum(T$sayac==59)
T_last <- T[,c(2,3,4,5)]
T_last$group <- rep(subj_table$group,each=60)
T_last$phase <- cut(
T_last$sayac,
breaks = c(0,19,39,59),
labels = c("1", "2", "3"),
include.lowest = TRUE
)
library(lme4)
T_last$yatirim <- factor(T_last$yatirim)
#T_last$rakip <- factor(T_last$rakip)
T_last$group <- factor(T_last$group)
T_last$phase <- factor(T_last$phase)
# Investigating the table
# DO NOT FORGET ! THIS DOESNT CONSIDERED THE REPEATED MEASURE DESIGN SO CONTINUE
# TO GLM MODEL
# Create a 2x2 table for each group
tables <- by(T_last, T_last$group, function(sub_df) table(yatirim = sub_df$yatirim, rakip = sub_df$rakip))
# Display tables
tables
T_last
subj_table$group
T_raw <- read.csv("./data/raw/response.csv")
T <- T_raw[T_raw$denekId %in% subj_table$task.id,]
T_aslihan <- read.csv("./data/processed/aslihan_filtered.csv")
T <- rbind(T,T_aslihan)
# Control the number of subject
#sum(T$sayac==59)
T_last <- T[,c(2,3,4,5)]
T_last$group <- rep(subj_table$group,each=60)
T_last$sex <- rep(subj_table$sex,each=60)
T_last$age <- rep(subj_table$age,each=60)
T_last$doi <- rep(subj_table$DoI,each=60)
T_last$phase <- cut(
T_last$sayac,
breaks = c(0,19,39,59),
labels = c("1", "2", "3"),
include.lowest = TRUE
)
su
str(T_last)
T_last$age <- rep(as.numeric(subj_table$age),each=60)
T_last$doi <- rep(as.numeric(subj_table$DoI),each=60)
T_last$phase <- cut(
T_last$sayac,
breaks = c(0,19,39,59),
labels = c("1", "2", "3"),
include.lowest = TRUE
)
library(lme4)
T_last$yatirim <- factor(T_last$yatirim)
#T_last$rakip <- factor(T_last$rakip)
T_last$group <- factor(T_last$group)
T_last$phase <- factor(T_last$phase)
# Investigating the table
# DO NOT FORGET ! THIS DOESNT CONSIDERED THE REPEATED MEASURE DESIGN SO CONTINUE
# TO GLM MODEL
# Create a 2x2 table for each group
tables <- by(T_last, T_last$group, function(sub_df) table(yatirim = sub_df$yatirim, rakip = sub_df$rakip))
# Display tables
tables
str(T_last)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group * sex + phase + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase * group + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
model_simple <- glmer(yatirim ~ group + sex + phase * sex + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + age,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) ,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + sex + phase + (1 | denekId) + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
### Model Diagnostics ####
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(model_simple)
# Plot residual diagnostics
plot(sim_res)
library(car)
vif(model_simple)
### ICC
library(performance)
icc(model_simple)
long_pe_list[[1]]$logPE <- log(long_pe_list[[1]]$PE_shifted)
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
lognormal_model <- lmer(logPE ~ Group + Sex + Task + (1 | Subject) + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
library(car)
vif(lognormal_model)
library(performance)
icc(lognormal_model)
summary(model_simple)
model_simple <- glmer(yatirim ~ group * phase + sex +  (1 | denekId) + doi,
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
plot_odds_ratios(model_simple, TITLE=" (Binomial GLMM)")
source("~/GitHub/sch_pe/external/R/plot_odds_ratios.R", echo=TRUE)
plot_odds_ratios(model_simple, TITLE=" (Binomial GLMM)")
# Custom labels (optional)
labels <- c(
"group1" = "SZ vs. HC",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3",
"sex" = "Sex",
"doi" = "Illness Duration"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels, TITLE=" (Binomial GLMM)")
source("~/GitHub/sch_pe/external/R/plot_prediction_effects.R", echo=TRUE)
plot_prediction_effects(lognormal_model,TITLE = " (LogNormal GLMM)")
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
plot_prediction_effects(lognormal_model,TITLE = " (LogNormal GLMM)")
labels <- c(
"Groupsz" = "SZ vs. HC",
"Task2" = "Phase 2 vs. Phase 1",
"Task3" = "Phase 3 vs. Phase 1",
"Groupsz:Task2" = "Group x Phase 2",
"Groupsz:Task3" = "Group x Phase 3",
"SexM" = "M vs. F",
"Groupsz:SexM" = "Group x Sex",
"DoI" = "Illness Duration"
)
plot_prediction_effects(lognormal_model,custom_labels = labels,TITLE = " (LogNormal GLMM)")
lognormal_model <- lmer(logPE ~ Group * Sex + Task + (1 | Subject) + DoI, data = long_pe_list[[1]])
summary(lognormal_model)
# Check Distribition of dependent
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
