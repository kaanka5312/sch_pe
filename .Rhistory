# Display summaries for models 6 and 7
lapply(model_results_6_7, summary)
model_alpha <- lmer(PE ~ Group * Trial + (1 | Subject), data = long_pe_list[[7]])
# Summary of results
summary(model_alpha)
model_alpha <- lmer(PE ~ Group + Trial + Sex + (1 | Subject), data = long_pe_list[[7]])
# Summary of results
summary(model_alpha)
# Mixed-effects model to compare learning rate across trials between groups
model_alpha <- lmer(PE ~ Group * Trial * Sex + (1 | Subject), data = long_pe_list[[7]])
# Summary of results
summary(model_alpha)
model_alpha <- lmer(PE ~ Group *  Sex + (1 | Subject), data = long_pe_list[[7]])
# Summary of results
summary(model_alpha)
head(long_pe_list[[7]])
model_alpha <- lmer(PE ~ Group * Task * Sex + (1 | Subject), data = long_pe_list[[7]])
# Summary of results
summary(model_alpha)
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(1:3,6,7)] function(df) {
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
# Apply the mixed-effects model to list elements 4-5
model_results <- lapply(long_pe_list[4:5], function(df) {
lm(PE ~ Group * Task * Sex , data = df)
})
# Display summaries for all models
lapply(model_results, summary)
dat <- list(readMat("./data/processed/pe_array2.mat"),
readMat("./data/processed/x2_array.mat"),
readMat("./data/processed/x3_array.mat"),
readMat("./data/processed/x2_pe_array.mat"),
readMat("./data/processed/x3_pe_array.mat"),
readMat("./data/processed/alfa2_array.mat"),
readMat("./data/processed/alfa3_array.mat"),
readMat("./data/processed/rw_pe.mat"))
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
long_pe_list[[8]]
model_results <- lapply(long_pe_list[[8]], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
long_pe_list
long_pe_list[[9]]
long_pe_list[[8]]
model_result <- lmer(PE ~ Group * Task * Sex + (1 | Subject), data = long_pe_list[[8]])
model_result <- lm(PE ~ Group * Task * Sex, data = long_pe_list[[8]])
summary(model_result)
# Apply the mixed-effects model to list elements 4-5
model_results <- lapply(long_pe_list[c(4:5,8)], function(df) {
lm(PE ~ Group * Task * Sex , data = df)
})
# Display summaries for all models
lapply(model_results, summary)
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
library(ggplot2)
ggplot(long_pe_list[[4]], aes(x = Task, y = PE, color = Group)) +
geom_smooth(method = "loess") +
facet_wrap(~ Sex) +
labs(title = "Learning Rate (α) Across Tasks", x = "Task", y = "Learning Rate (α)") +
theme_minimal()
subj_table$task.id
T_raw <- read.csv("./data/raw/response.csv")
T <- T_raw[T_raw$denekId %in% subj_table$task.id,]
T
T_aslihan <- read.csv("./data/processed/aslihan_filtered.csv")
T_aslihan
cbind(T,T_aslihan)
rbind(T,T_aslihan)
T <- rbind(T,T_aslihan)
T_last <- T[,c(2,3,4,5)]
T_last
subj_table
T_last$group <- rep(subj_table$group,each=60)
T_last$phase <- cut(
T_last$sayac,
breaks = c(0,19,39,59),
labels = c("1", "2", "3"),
include.lowest = TRUE
)
T_last
T_last$yatirim <- factor(T_last$yatirim)
T_last$rakip <- factor(T_last$rakip)
T_last$group <- factor(T_last$group)
T_last$phase <- factor(T_last$phase)
model <- glmer(
yatirim ~ group * phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit")
)
summary(model)
model <- glm(
yatirim ~ group * phase ,
data = T_last,
family = binomial(link = "logit")
)
summary(model)
# Create a 2x2 table for each group
tables <- by(T_last, T_last$group, function(sub_df) table(sub_df$yatirim, sub_df$rakip))
tables
str(T_last)
# Create contingency table for group differences in yatırım
yatirim_table <- matrix(c(1030, 1458, 781, 808), nrow = 2, byrow = TRUE)
# Add row & column names for readability
rownames(yatirim_table) <- c("Group 0 (HC)", "Group 1 (SZ)")
colnames(yatirim_table) <- c("yatirim = 0", "yatirim = 1")
# Print table
print(yatirim_table)
# Perform Chi-Square Test
chisq_test <- chisq.test(yatirim_table)
print(chisq_test)
group
sum(group==hc)
sum(group=="hc")
n_hc <- 51
n_sz <- 31
# Compute investment rates per subject
prop_hc <- yatirim_table[1, 2] / n_hc  # HC: Number of 1s / HC subjects
prop_sz <- yatirim_table[2, 2] / n_sz  # SZ: Number of 1s / SZ subjects
# Total investments (yatırım = 1) in each group
yatirim_counts <- c(yatirim_table[1, 2], yatirim_table[2, 2])  # Count of 1s
group_sizes <- c(n_hc, n_sz)  # Number of subjects in each group
# Perform a proportion test
prop_test <- prop.test(yatirim_counts, group_sizes)
prop_hc
prop_sz
yatirim_counts <- c(yatirim_table[1, 2], yatirim_table[2, 2])  # Count of 1s
group_sizes <- c(n_hc, n_sz)  # Number of subjects in each group
yatirim_counts
# Perform a proportion test
prop_test <- prop.test(yatirim_counts, group_sizes)
# Total number of trials per group
trials_hc <- sum(yatirim_table[1, ])  # Total trials for HC
trials_sz <- sum(yatirim_table[2, ])  # Total trials for SZ
# Corrected proportion test
prop_test <- prop.test(yatirim_counts, c(trials_hc, trials_sz))
# Print results
print(prop_test)
library(lme4)
model_glmer <- glmer(
yatirim ~ group * phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit")
)
summary(model_glmer)
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
anova(model_glmer, model_simple)  # Compare models
model_simple
model <- glmer(
yatirim ~ group * phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit")
)
model
model_glmer <- glmer(
yatirim ~ group * phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit")
)
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
anova(model_glmer, model_simple)  # Compare models
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
str(long_pe_list[[1]])
Q1 <- quantile(long_pe_list[[1]]$PE, 0.25, na.rm = TRUE)  # 25th percentile
Q3 <- quantile(long_pe_list[[1]]$PE, 0.75, na.rm = TRUE)  # 75th percentile
IQR_value <- Q3 - Q1  # Interquartile range
# Define lower bound for outliers
lower_bound <- Q1 - 1.5 * IQR_value
# Identify outlier subjects
outlier_subjects <- long_pe_list[[1]] %>%
group_by(Subject) %>%
summarise(mean_PE = mean(PE, na.rm = TRUE)) %>%
filter(mean_PE < lower_bound)
# Print outlier subjects
print(outlier_subjects)
long_pe_list[[1]] %>%
group_by(Subject)
long_pe_list[[1]] %>%
group_by(Subject) %>%
summarise(mean_PE = mean(PE, na.rm = TRUE))
Q1 <- quantile(long_pe_list[[1]]$PE, 0.25, na.rm = TRUE)  # 25th percentile
Q3 <- quantile(long_pe_list[[1]]$PE, 0.75, na.rm = TRUE)  # 75th percentile
IQR_value <- Q3 - Q1  # Interquartile range
# Define lower bound for outliers
lower_bound <- Q1 - 1.5 * IQR_value
lower_bound
Q1
Q2
Q3
Q1 <- quantile(long_pe_list[[1]]$PE, 0.25, na.rm = TRUE)  # 25th percentile
Q3 <- quantile(long_pe_list[[1]]$PE, 0.75, na.rm = TRUE)  # 75th percentile
IQR_value <- Q3 - Q1  # Interquartile range
Q1 - 1.5 * IQR_value
lower_bound
library(dplyr)
# Compute IQR thresholds for PE
Q1 <- quantile(long_pe_list[[1]]$PE, 0.25, na.rm = TRUE)  # 25th percentile
Q3 <- quantile(long_pe_list[[1]]$PE, 0.75, na.rm = TRUE)  # 75th percentile
IQR_value <- Q3 - Q1  # Interquartile range
# Define lower and upper bounds for outliers
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
# Find all outliers in PE
outliers <- long_pe_list[[1]] %>%
filter(PE < lower_bound | PE > upper_bound) %>%
arrange(Subject)
outliers
print(outliers)
plot(density(long_pe_list[[1]]$PE))
plot(density(long_pe_list[[4]]$PE))
plot(density(long_pe_list[[5]]$PE))
# Extract residuals from one of the models
residuals <- residuals(model_results[[1]])
# Check normality with histogram
hist(residuals, breaks = 30, main = "Residuals of LMM", xlab = "Residuals")
# QQ plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Shapiro-Wilk normality test
shapiro.test(residuals)
library(lme4)
model_results <- glmer(PE ~ Group * Task * Sex + (1 | Subject), data = long_pe_list[[1]], family = Gamma(link = "log"))
log_PE <- log(long_pe_list[[1]] + 1)
log_PE <- log(long_pe_list[[1]]$PE + 1)
log_PE
long_pe_list[[1]]$log_PE <- log(long_pe_list[[1]]$PE + 1)
library(lme4)
model_results <- lmer(log_PE ~ Group * Task * Sex + (1 | Subject), data = long_pe_list[[1]])
summary(model_result)
summary(model_results)
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
model_results[[1]]
long_pe_list[[1]]$log_PE <- log(long_pe_list[[1]]$PE + 1)
library(lme4)
model_result <- lmer(log_PE ~ Group * Task * Sex + (1 | Subject), data = long_pe_list[[1]])
model_result
summary(model_results()
summary(model_results)
summary(model_results)
summary(model_result)
plot(density(long_pe_list[[1]]$log_PE))
residuals_log <- residuals(model_result)
shapiro.test(residuals_log)
min(long_pe_list[[1]]$PE)
min_PE <- min(long_pe_list[[1]]$PE)  # Find minimum value in PE
shift_value <- ifelse(min_PE <= 0, abs(min_PE) + 1e-6, 0)  # Ensure all values are > 0
shift_value
min_PE <- min(long_pe_list[[1]]$PE)  # Find minimum value in PE
shift_value <- ifelse(min_PE <= 0, abs(min_PE) + 1e-6, 0)  # Ensure all values are > 0
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + shift_value  # Apply the shift
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + shift_value  # Apply the shift
library(lme4)
gamma_model <- glmer(PE_shifted ~ Group * Task * Sex + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"))
gamma_model <- glmer(PE_shifted ~ Group * Task * Sex + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "Nelder_Mead"))
gamma_model <- glmer(PE_shifted ~ Group * Task * Sex + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + abs(min(long_pe_list[[1]]$PE)) + 0.01
gamma_model <- glmer(PE_shifted ~ Group * Task * Sex + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
gamma_model <- glmer(PE_shifted ~ Group + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
gamma_model <- glmer(PE_shifted ~ Group * Phase + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
str(long_pe_list[[1]])
gamma_model <- glmer(PE_shifted ~ Group * Task + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
str(long_pe_list[[1]])
library(car)
vif(gamma_model)  # If VIF > 5-10, consider centering predictors
gamma_model <- glmer(PE_shifted ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
lognorm_model <- glmer(PE_shifted ~ Group * Task + (1 | Subject),
data = long_pe_list[[1]],
family = gaussian(link = "log"))
anova(gamma_model, lognorm_model)  # Compare AIC
gamma_model_c <- glmer(PE_shifted ~ Group * Task_c + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"))
long_pe_list[[1]]$Task_c <- as.numeric(long_pe_list[[1]]$Task) - mean(as.numeric(long_pe_list[[1]]$Task))
long_pe_list[[1]]$Task_c
gamma_model_c <- glmer(PE_shifted ~ Group * Task_c + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"))
summary(gamma_model_c)
library(emmeans)
emm <- emmeans(gamma_model_c, ~ Group * Task_c)
plot(emm)
gamma_model_simple <- glmer(PE_shifted ~ Group + Task_c + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"))
anova(gamma_model_simple, gamma_model_c)
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
model_int <- glmer(yatirim ~ group * phase + (1 | denekId), data = T_last, family = binomial(link = "logit"))
anova(model_simple, model_int)
exp(fixef(model_simple))  # Computes odds ratios
library(dplyr)
# Summarize investment behavior for each subject in each phase
subject_phase_summary <- T_last %>%
group_by(Subject, Group, Phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = Phase, values_from = mean_yatirim, names_prefix = "Phase")
T_last %>%
group_by(Subject, Group, Phase)
T_last
subject_phase_summary <- T_last %>%
group_by(denekID, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = Phase, values_from = mean_yatirim, names_prefix = "Phase")
subject_phase_summary <- T_last %>%
group_by(denekId, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = Phase, values_from = mean_yatirim, names_prefix = "Phase")
subject_phase_summary <- T_last %>%
group_by(denekId, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = phase, values_from = mean_yatirim, names_prefix = "phase")
T_last %>%
group_by(denekId, group, phase)
T_last %>%
group_by(denekId, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE))
str(T_last)
T_last$yatirim <- as.numeric(as.character(T_last$yatirim))
subject_phase_summary <- T_last %>%
group_by(denekId, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = phase, values_from = mean_yatirim, names_prefix = "phase")
subject_phase_summary
subject_phase_summary <- subject_phase_summary %>%
mutate(Change_P2_P3 = Phase3 - Phase2)
subject_phase_summary <- subject_phase_summary %>%
mutate(Change_P2_P3 = phase3 - phase2)
subject_phase_summary
# Print the summary
print(subject_phase_summary)
# Compare mean investment change by group
group_change_summary <- subject_phase_summary %>%
group_by(group) %>%
summarise(mean_change = mean(Change_P2_P3, na.rm = TRUE),
sd_change = sd(Change_P2_P3, na.rm = TRUE))
print(group_change_summary)
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
anova(model_glmer, model_simple)  # Compare models
summary(model_simple)
gamma_model <- glmer(PE_shifted ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
model_results[[1]]
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
dat <- list(readMat("./data/processed/pe_array2.mat"), # Cemre RW PE
readMat("./data/processed/x2_array.mat"), # HGF X2
readMat("./data/processed/x3_array.mat"), # HGF X3
readMat("./data/processed/x2_pe_array.mat"), # HGF low level PE
readMat("./data/processed/x3_pe_array.mat"), # HGF high level PE
readMat("./data/processed/alfa2_array.mat"), # learning rate level 2
readMat("./data/processed/alfa3_array.mat"), # learning rate level 3
readMat("./data/processed/rw_pe.mat")) # RW model PE from TAPAS
subj_table <- read.csv("./data/raw/subjects_list.csv")
convert_to_long <- function(dat, subj_table) {
# Extract PE matrix (first 60 columns) and group information (column 61)
pe_mat <- dat$merged.matrix[,1:60]
group <- factor(ifelse(dat$merged.matrix[,61], "sz", "hc"))
task <- factor(rep(1:3, each = 20))  # Assuming 3 tasks with 20 trials each
sex <- factor(ifelse(subj_table$sex, "M", "F"))
# Convert PE matrix to a data frame
pe_df <- as.data.frame(pe_mat)
# Add Subject IDs
pe_df$Subject <- seq_len(nrow(pe_mat))  # Assign unique IDs to subjects
# Reshape to long format
long_pe <- melt(pe_df, id.vars = "Subject", variable.name = "Trial", value.name = "PE")
# Convert Trial variable to numeric
#long_pe$Trial <- as.numeric(gsub("V", "", long_pe$Trial))  # Remove "V" prefix if needed
# Add Group information (repeat for each trial)
long_pe$Group <- rep(group, each = ncol(pe_mat))
# Add Task information (repeat for each subject)
long_pe$Task <- rep(task, times = nrow(pe_mat))
# Add Sex information (repeat for each trial)
long_pe$Sex <- rep(sex, each = ncol(pe_mat))
return(long_pe)
}
# Usage
long_pe_list <- lapply(dat, convert_to_long, subj_table = subj_table)
library(lme4)
library(lmerTest)
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(1:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
model_result <- lmer(PE ~ Group * Task * Sex + (1 + Task | Subject), data = long_pe_list[[1]])
summary(model_result)
gamma_model <- glmer(PE_shifted ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
long_pe_list[[1]]$PE_shifted <- long_pe_list[[1]]$PE + abs(min(long_pe_list[[1]]$PE)) + 0.01
library(lme4)
gamma_model <- glmer(PE_shifted ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model)
# Apply the mixed-effects model to list elements 1-5
model_results <- lapply(long_pe_list[c(2:3,6,7)], function(df) {
lmer(PE ~ Group * Task * Sex + (1 | Subject), data = df)
})
# Display summaries for all models
lapply(model_results, summary)
# Apply the mixed-effects model to list elements 4-5
model_results <- lapply(long_pe_list[c(4:5,8)], function(df) {
lm(PE ~ Group * Task * Sex , data = df)
})
# Display summaries for all models
lapply(model_results, summary)
plot(density(long_pe_list[[4]]))
plot(density(long_pe_list[[4]]$PE))
shapiro.test(long_pe_list[[4]]$PE)
shapiro.test(log(long_pe_list[[4]]$PE+1e-6))
# Define a small positive constant to avoid log(0)
epsilon <- min(long_pe_list[[4]]$PE[long_pe_list[[4]]$PE > 0], na.rm = TRUE) / 10
# Log-transform the PE values
long_pe_list[[4]]$log_PE <- log(long_pe_list[[4]]$PE + epsilon)
# Visualize the new distribution
hist(long_pe_list[[4]]$log_PE, breaks = 50, main = "Histogram of Log-Transformed PE", col = "skyblue")
plot(density(long_pe_list[[4]]$log_PE), main = "Density of Log-Transformed PE")
epsilon
shift_value <- abs(min(long_pe_list[[4]]$PE, na.rm = TRUE)) + 0.01
long_pe_list[[4]]$log_PE <- log(long_pe_list[[4]]$PE + shift_value)
hist(long_pe_list[[4]]$log_PE, breaks = 50, main = "Histogram of Log-Transformed PE", col = "skyblue")
plot(density(long_pe_list[[4]]$log_PE, na.rm = TRUE), main = "Density of Log-Transformed PE")
library(MASS)
fit_gamma <- fitdistr(long_pe_list[[4]]$PE, "gamma")
library(MASS)
fit_gamma <- fitdistr(long_pe_list[[4]]$log_PE, "gamma")
fit_lognorm <- fitdistr(long_pe_list[[4]]$PE + abs(min(long_pe_list[[4]]$PE)) + 1, "lognormal")
print(fit_lognorm)
min_val <- min(long_pe_list[[4]]$log_PE, na.rm = TRUE)
log_PE_shifted <- long_pe_list[[4]]$log_PE - min_val + 1
fit_gamma <- fitdistr(log_PE_shifted, "gamma")
print(fit_gamma)
plot(density(long_pe_list[[4]]$PE))
min(long_pe_list[[4]]$PE)
max(long_pe_list[[4]]$PE)
library(VGAM)
install.packages("VGAM")
library(VGAM)
library(VGAM)
fit_laplace <- vglm(long_pe_list[[4]]$PE ~ 1, laplace())
summary(fit_laplace)
library(MASS)
fit_t <- fitdistr(long_pe_list[[4]]$PE, "t")
summary(fit_t)
