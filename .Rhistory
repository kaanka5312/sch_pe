library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(model_random)
# Plot residual diagnostics
plot(sim_res)
gamma_model2 <- glmer(PE_shifted ~ Group * Task + (1 + Task | Subject),
data = long_pe_list[[1]],
family = Gamma(link = "log"),
control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 1e5)))
summary(gamma_model2)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(gamma_model2)
# Plot residual diagnostics
plot(sim_res)
# Log-normal as alternative
long_pe_list[[1]]$logPE <- log(long_pe_list[[1]]$PE_shifted)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
long_pe_list[[1]]
model_fixed <- glm(logPE ~ Group + Task,
data = long_pe_list[[1]])
# Model with random intercept (your full model)
model_random <- lmer(logPE ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]])
# Compare the two models
anova(model_fixed, model_random, test = "Chisq")
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
# Model without random intercept (fixed effects only)
model_fixed <- glm(logPE ~ Group + Task,
data = long_pe_list[[1]])
# Model with random intercept (your full model)
model_random <- lmer(logPE ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]])
# Compare the two models
anova(model_fixed, model_random, test = "Chisq")
# Refit both using maximum likelihood (ML), not REML, for comparison
model_fixed_ml <- lm(logPE ~ Group + Task, data = long_pe_list[[1]])
model_random_ml <- lmer(logPE ~ Group + Task + (1 | Subject),
data = long_pe_list[[1]], REML = FALSE)
# Likelihood ratio test
anova(model_fixed_ml, model_random_ml, test = "Chisq")
library(performance)
icc(model_random)
summary(lognormal_model)
lognormal_model <- lmer(logPE ~ Group * Task + (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
exp(fixef(lognormal_model))
dat <-readMat("./data/processed/p3_pe_discrete.mat")
dat2=list()
dat2$merged.matrix = as.matrix(dat$neg.pe)
dat2_long <- convert_to_long(dat = dat2,subj_table = subj_table)
library(lme4)
# Poisson mixed model with Subject as a random effect
poisson_model <- glm(PE ~ Group * Task * Sex,
data = dat2_long,
family = poisson(link = "log"))
summary(poisson_model)
T_raw <- read.csv("./data/raw/response.csv")
T <- T_raw[T_raw$denekId %in% subj_table$task.id,]
T_aslihan <- read.csv("./data/processed/aslihan_filtered.csv")
T <- rbind(T,T_aslihan)
# Control the number of subject
#sum(T$sayac==59)
T_last <- T[,c(2,3,4,5)]
T_last$group <- rep(subj_table$group,each=60)
T_last$phase <- cut(
T_last$sayac,
breaks = c(0,19,39,59),
labels = c("1", "2", "3"),
include.lowest = TRUE
)
library(lme4)
T_last$yatirim <- factor(T_last$yatirim)
#T_last$rakip <- factor(T_last$rakip)
T_last$group <- factor(T_last$group)
T_last$phase <- factor(T_last$phase)
tables <- by(T_last, T_last$group, function(sub_df) table(yatirim = sub_df$yatirim, rakip = sub_df$rakip))
# Display tables
tables
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
T_last$yatirim <- as.numeric(as.character(T_last$yatirim))
subject_phase_summary <- T_last %>%
group_by(denekId, group, phase) %>%
summarise(mean_yatirim = mean(yatirim, na.rm = TRUE)) %>%
pivot_wider(names_from = phase, values_from = mean_yatirim, names_prefix = "phase")
# Compute investment change between phases
subject_phase_summary <- subject_phase_summary %>%
mutate(Change_P2_P3 = phase3 - phase2)
# Print the summary
print(subject_phase_summary)
group_change_summary <- subject_phase_summary %>%
group_by(group) %>%
summarise(mean_change = mean(Change_P2_P3, na.rm = TRUE),
sd_change = sd(Change_P2_P3, na.rm = TRUE))
print(group_change_summary)
plot(density(long_pe_list[[4]]$PE))
max(long_pe_list[[4]]$PE)
# Addition of the interaction doesn't improve the model
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
str(long_pe_list[[1]]=
str(long_pe_list[[1]])
library(DHARMa)
simres <- simulateResiduals(fittedModel = model_simple)
plot(simres)
library(car)
vif(model_simple)  # only works for lm/glm, so consider fitting a glm first for approximate values
icc(model_simple)
summary(model_simple)
# Install if needed
install.packages("sjPlot")
# Load libraries
library(sjPlot)
# Load libraries
library(sjPlot)
library(broom.mixed)  # For tidy output
install.packages("broom.mixed")
library(broom.mixed)  # For tidy output
library(ggplot2)
# Extract fixed effects
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Create the plot
ggplot(coefs, aes(x = estimate, y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "Log-Odds (logit scale)", y = "",
title = "Fixed Effects from Binomial GLMM") +
theme_minimal()
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
library(broom.mixed)  # For tidy output
library(ggplot2)
# Extract fixed effects
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Create the plot
ggplot(coefs, aes(x = estimate, y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "Log-Odds (logit scale)", y = "",
title = "Fixed Effects from Binomial GLMM") +
theme_minimal()
confint(model_simple)
str(T_last)
model_simple <- glmer(yatirim ~ group * phase * (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
lognormal_model <- lmer(logPE ~ Group * Task * (1 | Subject), data = long_pe_list[[1]])
### Model Diagnostics ####
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject), data = long_pe_list[[1]])
library(DHARMa)
# Simulate residuals
sim_res <- simulateResiduals(lognormal_model)
# Plot residual diagnostics
plot(sim_res)
lognormal_model <- lmer(logPE ~ Group * Task * (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
library(broom.mixed)
library(ggplot2)
# Get fixed effect estimates with confidence intervals
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Plot
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
model_simple <- glmer(yatirim ~ group + phase + (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
library(broom.mixed)
library(ggplot2)
# Get fixed effect estimates with confidence intervals
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Plot
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
model_simple <- glmer(yatirim ~ group * phase * (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
library(broom.mixed)
library(ggplot2)
# Get fixed effect estimates with confidence intervals
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Plot
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
# Change y-axis labels (edit here as you like)
coefs$term <- factor(coefs$term, levels = coefs$term)  # preserve order
coefs$term <- recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group × Phase 2",
"group1:phase3" = "Group × Phase 3")
model_simple <- glmer(yatirim ~ group * phase * (1 | denekId),
data = T_last,
family = binomial(link = "logit"))
summary(model_simple)
library(broom.mixed)
library(ggplot2)
# Get fixed effect estimates with confidence intervals
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Change y-axis labels (edit here as you like)
coefs$term <- factor(coefs$term, levels = coefs$term)  # preserve order
coefs$term <- recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group × Phase 2",
"group1:phase3" = "Group × Phase 3")
coefs$term <- dplyr::recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group × Phase 2",
"group1:phase3" = "Group × Phase 3")
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
coefs$term
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
coefs
coefs$term <- factor(coefs$term, levels = coefs$term)  # preserve order
coefs$term
coefs$term <- dplyr::recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group × Phase 2",
"group1:phase3" = "Group × Phase 3")
coefs
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
View(coefs)
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Change y-axis labels (edit here as you like)
coefs$term <- factor(coefs$term, levels = coefs$term)  # preserve order
coefs$term <- dplyr::recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group * Phase 2",
"group1:phase3" = "Group * Phase 3")
View(coefs)
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
# Get fixed effect estimates with confidence intervals
coefs <- broom.mixed::tidy(model_simple, effects = "fixed", conf.int = TRUE)
# Exponentiate to get odds ratios
coefs$OR <- exp(coefs$estimate)
coefs$OR_low <- exp(coefs$conf.low)
coefs$OR_high <- exp(coefs$conf.high)
# Remove intercept if not needed
coefs <- coefs[coefs$term != "(Intercept)", ]
# Change y-axis labels (edit here as you like)
coefs$term <- factor(coefs$term, levels = coefs$term)  # preserve order
coefs$term <- dplyr::recode(coefs$term,
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3")
# Plot
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray") +
labs(x = "Odds Ratio", y = "", title = "Odds Ratios with 95% CI (Binomial GLMM)") +
theme_minimal()
library(ggplot2)
# Create the plot
ggplot(coefs, aes(x = OR, y = term)) +
geom_point(size = 4) +  # Increase dot size
geom_errorbarh(aes(xmin = OR_low, xmax = OR_high), height = 0.2, linewidth = 1.2) +  # Thicker error bars
geom_vline(xintercept = 1, linetype = "dashed", color = "gray", linewidth = 1) +  # Thicker reference line
labs(
x = "Odds Ratio",
y = "",
title = "Odds Ratios with 95% CI (Binomial GLMM)"
) +
theme_minimal(base_size = 14) +  # Set base font size (ticks and labels)
theme(
axis.text.x = element_text(size = 14),   # X tick font size
axis.text.y = element_text(size = 14),   # Y tick font size
axis.title.x = element_text(size = 16, face = "bold"),  # X axis label
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)  # Centered and bold title
)
source("~/GitHub/sch_pe/external/R/plot_odds_ratios.R", echo=TRUE)
# Custom labels (optional)
labels <- c(
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group × Phase 2",
"group1:phase3" = "Group × Phase 3"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels)
labels <- c(
"group1" = "Group 1 vs. Group 0",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels)
# Custom labels (optional)
labels <- c(
"group1" = "SZ vs. HC",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels)
library(broom.mixed)
library(ggplot2)
# Custom labels (optional)
labels <- c(
"group1" = "SZ vs. HC",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels)
plot_odds_ratios(lognormal_model)
paste0("Odds Ratios with 95% CI","(Binomial GLMM)")
paste0("Odds Ratios with 95% CI"," (Binomial GLMM)")
source("~/GitHub/sch_pe/external/R/plot_odds_ratios.R", echo=TRUE)
labels <- c(
"group1" = "SZ vs. HC",
"phase2" = "Phase 2 vs. Phase 1",
"phase3" = "Phase 3 vs. Phase 1",
"group1:phase2" = "Group x Phase 2",
"group1:phase3" = "Group x Phase 3"
)
# Run the function on your model
plot_odds_ratios(model_simple, custom_labels = labels, TITLE=" (Binomial GLMM)")
plot_odds_ratios(lognormal_model)
plot_odds_ratios(lognormal_model, TITLE = " (LogNormal GLMM)")
lognormal_model <- lmer(logPE ~ Group * Task * (1 | Subject), data = long_pe_list[[1]])
plot_odds_ratios(lognormal_model, TITLE = " (LogNormal GLMM)")
coefs <- broom.mixed::tidy(lognormal_model, effects = "fixed", conf.int = TRUE)
coefs
View(coefs)
labels <- c(
"Groupsz" = "SZ vs. HC",
"Task2" = "Phase 2 vs. Phase 1",
"Task3" = "Phase 3 vs. Phase 1",
"Groupsz:Task2" = "Group x Phase 2",
"Groupsz:Task3" = "Group x Phase 3"
)
plot_odds_ratios(lognormal_model, TITLE = " (LogNormal GLMM)")
labels <- c(
"Groupsz" = "SZ vs. HC",
"Task2" = "Phase 2 vs. Phase 1",
"Task3" = "Phase 3 vs. Phase 1",
"Groupsz:Task2" = "Group x Phase 2",
"Groupsz:Task3" = "Group x Phase 3"
)
plot_odds_ratios(lognormal_model,custom_labels = labels,TITLE = " (LogNormal GLMM)")
lognormal_model <- lmer(logPE ~ Group + Task + (1 | Subject), data = long_pe_list[[1]])
summary(lognormal_model)
plot_prediction_effects <- function(model, exclude_intercept = TRUE, custom_labels = NULL, TITLE = "") {
library(broom.mixed)
library(ggplot2)
library(dplyr)
# Tidy fixed effects with confidence intervals
coefs <- broom.mixed::tidy(model, effects = "fixed", conf.int = TRUE)
# Exponentiate to get multiplicative effects on raw PE
coefs <- coefs %>%
mutate(
multiplier = exp(estimate),
mult_low = exp(conf.low),
mult_high = exp(conf.high)
)
# Optionally remove intercept
if (exclude_intercept) {
coefs <- coefs[coefs$term != "(Intercept)", ]
}
# Optionally relabel terms
if (!is.null(custom_labels)) {
coefs$term <- factor(coefs$term, levels = coefs$term)
coefs$term <- dplyr::recode(coefs$term, !!!custom_labels)
}
# Plot
p <- ggplot(coefs, aes(x = multiplier, y = term)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmin = mult_low, xmax = mult_high), height = 0.2, linewidth = 1.2) +
geom_vline(xintercept = 1, linetype = "dashed", color = "gray", linewidth = 1) +
labs(
x = "Multiplicative Effect on Raw Prediction Error",
y = "",
title = paste0("Prediction Error Effects with 95% CI", TITLE)
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
)
return(p)
}
labels <- c(
"Groupsz" = "Group (SZ vs. HC)",
"Task2"   = "Task 2 vs. Task 1",
"Task3"   = "Task 3 vs. Task 1"
)
plot_prediction_effects(lognormal_model, custom_labels = labels, TITLE = " (Lognormal GLMM)")
plot_prediction_effects(lognormal_model,custom_labels = labels,TITLE = " (LogNormal GLMM)")
lognormal_model <- lmer(logPE ~ Group * Task * (1 | Subject), data = long_pe_list[[1]])
plot_prediction_effects(lognormal_model,custom_labels = labels,TITLE = " (LogNormal GLMM)")
labels <- c(
"Groupsz" = "SZ vs. HC",
"Task2" = "Phase 2 vs. Phase 1",
"Task3" = "Phase 3 vs. Phase 1",
"Groupsz:Task2" = "Group x Phase 2",
"Groupsz:Task3" = "Group x Phase 3"
)
plot_prediction_effects(lognormal_model,custom_labels = labels,TITLE = " (LogNormal GLMM)")
summary(lognormal_model)
