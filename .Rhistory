level_list = list()
ylab_list = list()
parts=c("acw_dynamic_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Sliding Window ACW")
notopo_sim_ACW <- calculate_prs(no_topo, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Fixed Excitation", ylab_size= 12, method = "rowMeans")
notopo_sim_ACW$interaction_plots[[1]]
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
use_python("C:/Users/kaank/miniconda3/envs/multgroup/python.exe")
library(reticulate)
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
use_python("C:/Users/kaank/miniconda3/envs/multgroup/python.exe")
#use_python("/opt/anaconda3/envs/neurolib_env/bin/python")
np <- import("numpy")
merge_matrices <- function(array) {
# Initialize empty matrices to store the merged results
merged_acw_static_firing_matrix <- NULL
merged_acw_dynamic_firing_matrix <- NULL
merged_gscorr_fmri_matrix <- NULL
merged_gscorr_firing_matrix <- NULL
# Loop through each element in the list and row bind the matrices
for (i in seq_along(array)) {
merged_acw_static_firing_matrix <- rbind(merged_acw_static_firing_matrix, array[[i]]$acw_static_firing_matrix)
merged_acw_dynamic_firing_matrix <- rbind(merged_acw_dynamic_firing_matrix, array[[i]]$acw_dynamic_firing_matrix)
merged_gscorr_fmri_matrix <- rbind(merged_gscorr_fmri_matrix, array[[i]]$gscorr_fmri_matrix)
merged_gscorr_firing_matrix <- rbind(merged_gscorr_firing_matrix, array[[i]]$gscorr_firing_matrix)
}
# Return a list of merged matrices
return(list(
acw_static_firing_matrix = merged_acw_static_firing_matrix,
acw_dynamic_firing_matrix = merged_acw_dynamic_firing_matrix,
gscorr_fmri_matrix = merged_gscorr_fmri_matrix,
gscorr_firing_matrix = merged_gscorr_firing_matrix
))
}
no_topo <- merge_matrices(np$load(paste0(source_folder,"DATA/notopo_v3.npy"),allow_pickle = TRUE))
level_list = list()
ylab_list = list()
parts=c("acw_dynamic_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Sliding Window ACW")
notopo_sim_ACW <- calculate_prs(no_topo, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Fixed Excitation", ylab_size= 12, method = "rowMeans")
library(NeuroMyelFC)
no_topo <- merge_matrices(np$load(paste0(source_folder,"DATA/notopo_v3.npy"),allow_pickle = TRUE))
level_list = list()
ylab_list = list()
parts=c("acw_dynamic_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Sliding Window ACW")
notopo_sim_ACW <- calculate_prs(no_topo, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Fixed Excitation", ylab_size= 12, method = "rowMeans")
notopo_sim_ACW$interaction_plots
notopo_sim_ACW <- calculate_prs(no_topo, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Fixed Excitation", ylab_size= 12, method = "rowMeans")
### ONLY BASELINE ####
only_baseline <- merge_matrices(np$load(paste0(source_folder,"DATA/onlybase_v3.npy"),allow_pickle = TRUE))
baseline_sim_ACW <- calculate_prs(only_baseline, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Topograhical Excitation", ylab_size= 12, method = "rowMeans")
### BASELINE + RECURRENT #####
base_recurrent <- merge_matrices(np$load(paste0(source_folder,"DATA/baserecur_v3.npy"),allow_pickle = TRUE))
base_recur_sim_ACW <- calculate_prs(base_recurrent, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Topographical Recurrence \n Topograhical Excitation ", ylab_size= 12, method = "rowMeans")
####
# GSCORR ##
### NO TOPO ###
no_topo<- merge_matrices(np$load(paste0(source_folder,"DATA/notopo_v3.npy"),allow_pickle = TRUE))
level_list = list()
ylab_list = list()
parts=c("gscorr_fmri_matrix", "gscorr_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Balloon GSCORR")
ylab_list[[parts[2]]] = c("Firing rate GSCORR ")
notopo_sim <- calculate_prs(no_topo, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Fixed Excitation", ylab_size= 12, method = "rowMeans")
### ONLY BASELINE ####
only_baseline <- merge_matrices(np$load(paste0(source_folder,"DATA/onlybase_v3.npy"),allow_pickle = TRUE))
level_list = list()
ylab_list = list()
parts=c("gscorr_fmri_matrix", "gscorr_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Balloon GSCORR")
ylab_list[[parts[2]]] = c("Firing rate GSCORR ")
baseline_sim <- calculate_prs(only_baseline, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Fixed Recurrence \n Topograhical Excitation", ylab_size= 12, method = "rowMeans")
### BASELINE + RECURRENT #####
base_recurrent <- merge_matrices(np$load(paste0(source_folder,"DATA/baserecur_v3.npy"),allow_pickle = TRUE))
#base_recurrent$gscorr_firing_matrix <- base_recurrent$gscorr_firing_matrix[1:60,]
level_list = list()
ylab_list = list()
parts=c("gscorr_fmri_matrix", "gscorr_firing_matrix")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Balloon GSCORR")
ylab_list[[parts[2]]] = c("Firing rate GSCORR ")
base_recur_sim <- calculate_prs(base_recurrent, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "Topographical Recurrence \n Topograhical Excitation ", ylab_size= 12, method = "rowMeans")
base_recur_sim$interaction_plots$gscorr_firing_matrix
# Common figure
plotlist = list(
notopo_sim$interaction_plots$gscorr_firing_matrix,
baseline_sim$interaction_plots$gscorr_firing_matrix,
base_recur_sim$interaction_plots$gscorr_firing_matrix,
notopo_sim_ACW$interaction_plots$acw_dynamic_firing_matrix,
baseline_sim_ACW$interaction_plots$acw_dynamic_firing_matrix,
base_recur_sim_ACW$interaction_plots$acw_dynamic_firing_matrix
)
ggpubr::ggarrange(plotlist = plotlist, nrow = 2, ncol = 3
)
ggpubr::ggarrange(plotlist = plotlist, nrow = 2, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/recur_group_v3.png"),height = 800, width = 1200, res= 150)
library(tidyverse)
ggpubr::ggarrange(plotlist = plotlist, nrow = 2, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/recur_group_v3.png"),height = 800, width = 1200, res= 150)
source_folder = "/Users/kaankeskin/projects/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file1 <- paste0(source_folder,"FIGURES/Wilcox.png")
file2 <- paste0(source_folder,"FIGURES/test.png")
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image1 <- image_read(file1) %>% image_resize(geometry = "400x")
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file1 <- paste0(source_folder,"FIGURES/Wilcox.png")
file2 <- paste0(source_folder,"FIGURES/test.png")
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image1 <- image_read(file1) %>% image_resize(geometry = "400x")
image2 <- image_read(file2) %>% image_resize(geometry = "800x")
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
image4 <- image_read(file4) %>% image_resize(geometry = "1200x")
image_w <- image_blank(width=1200, height = 200, color = "white")
image1_2 <- image_append(c(image1,image2), stack = FALSE)
fig_5_merged <- image_append(c(image3,image_w, image4), stack = TRUE)
fig_5_merged
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file1 <- paste0(source_folder,"FIGURES/Wilcox.png")
file2 <- paste0(source_folder,"FIGURES/test.png")
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image1 <- image_read(file1) %>% image_resize(geometry = "400x")
image2 <- image_read(file2) %>% image_resize(geometry = "800x")
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
image4 <- image_read(file4) %>% image_resize(geometry = "1200x")
image_w <- image_blank(width=1200, height = 200, color = "white")
image1_2 <- image_append(c(image1,image2), stack = FALSE)
fig_5_merged <- image_append(c(image3,image_w, image4), stack = TRUE)
fig_5_merged
png(paste0(source_folder,"FIGURES/fig_5_new3.png"), width = 1200, height = 1524, res = 150)
plot(fig_5_merged)
text(x = 0, y = 1600, labels = "A", xpd = NA, cex=1.5, font=2)
text(x = 0, y = 1300, labels = "B", xpd = NA, cex=1.5, font=2)
text(x = 550, y = 1380, labels = "Empirical Results", xpd = NA, cex=1.5, font=1)
text(x = 550, y = 900, labels = "Simulation Results", xpd = NA, cex=1.5, font=1)
text(x = 0, y = 770, labels = "C", xpd = NA, cex=1.5, font=2)
text(x = 0, y = 770, labels = "C", xpd = NA, cex=1.5, font=2)
text(x = 0, y = 370, labels = "D", xpd = NA, cex=1.5, font=2)
dev.off()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(reticulate)
#source_folder = "/Users/kaankeskin/projects/MYELIN_2/"
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
use_python("C:/Users/kaank/miniconda3/envs/multgroup/python.exe")
#use_python("/opt/anaconda3/envs/neurolib_env/bin/python")
np <- import("numpy")
merge_matrices <- function(array) {
# Initialize empty matrices to store the merged results
merged_acw_static_firing_matrix <- NULL
merged_acw_dynamic_firing_matrix <- NULL
merged_gscorr_fmri_matrix <- NULL
merged_gscorr_firing_matrix <- NULL
# Loop through each element in the list and row bind the matrices
for (i in seq_along(array)) {
merged_acw_static_firing_matrix <- rbind(merged_acw_static_firing_matrix, array[[i]]$acw_static_firing_matrix)
merged_acw_dynamic_firing_matrix <- rbind(merged_acw_dynamic_firing_matrix, array[[i]]$acw_dynamic_firing_matrix)
merged_gscorr_fmri_matrix <- rbind(merged_gscorr_fmri_matrix, array[[i]]$gscorr_fmri_matrix)
merged_gscorr_firing_matrix <- rbind(merged_gscorr_firing_matrix, array[[i]]$gscorr_firing_matrix)
}
# Return a list of merged matrices
return(list(
acw_static_firing_matrix = merged_acw_static_firing_matrix,
acw_dynamic_firing_matrix = merged_acw_dynamic_firing_matrix,
gscorr_fmri_matrix = merged_gscorr_fmri_matrix,
gscorr_firing_matrix = merged_gscorr_firing_matrix
))
}
library(R.matlab)
library(NeuroMyelFC)
dat <- readMat(paste0(source_folder,"/DATA/7T_final.mat"))
dat_list <- list()
dat_list$myelin <- dat$myelin.replication
dat_list$ACW <- dat$ACW0.GS.replication
dat_list$GSCORR <- dat$GSCORR.GS.replication
level_list = list()
ylab_list = list()
parts=c("myelin", "ACW", "GSCORR")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[3]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Myelin")
ylab_list[[parts[2]]] = c("ACW")
ylab_list[[parts[3]]] = c("GSCORR")
empirical <- calculate_prs(dat_list, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "", ylab_size= 12, method = "rowMeans")
ggpubr::ggarrange(plotlist = empirical$interaction_plots, nrow = 1, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/empirical.png"),height = 400, width = 1200, res= 150)
library(tidyverse)
dat_list$myelin <- dat$myelin.replication
dat_list$ACW <- dat$ACW0.GS.replication
dat_list$GSCORR <- dat$GSCORR.GS.replication
level_list = list()
ylab_list = list()
parts=c("myelin", "ACW", "GSCORR")
level_list[[parts[1]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[2]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
level_list[[parts[3]]]=c("TransSelf","TransNonself","UniSelf" , "UniNonself")
ylab_list[[parts[1]]] = c("Myelin")
ylab_list[[parts[2]]] = c("ACW")
ylab_list[[parts[3]]] = c("GSCORR")
empirical <- calculate_prs(dat_list, parts = parts,levels=level_list,y_labels = ylab_list,textsize=6,sign_size=4,ast_size = 6,title = "", ylab_size= 12, method = "rowMeans")
ggpubr::ggarrange(plotlist = empirical$interaction_plots, nrow = 1, ncol = 3
)%>% ggpubr::ggexport(filename = paste0(source_folder,"FIGURES/empirical.png"),height = 400, width = 1200, res= 150)
source_folder = "/Users/kaankeskin/projects/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
source_folder = "C:/Users/kaank/OneDrive/Belgeler/GitHub/MYELIN_2/"
# New figure with results
library(magick)
# Example PNG files
file3 <- paste0(source_folder,"FIGURES/empirical.png")
file4 <- paste0(source_folder,"FIGURES/recur_group_v3.png")
# Read the PNG files
image3 <- image_read(file3) %>% image_resize(geometry = "1200x")
image4 <- image_read(file4) %>% image_resize(geometry = "1200x")
image_w <- image_blank(width=1200, height = 200, color = "white")
fig_5_merged <- image_append(c(image3,image_w, image4), stack = TRUE)
png(paste0(source_folder,"FIGURES/fig_5_new3.png"), width = 1200, height = 1400, res = 150)
plot(fig_5_merged)
text(x = 0, y = 1350, labels = "A", xpd = NA, cex=1.5, font=2)
text(x = 0, y = 750, labels = "B", xpd = NA, cex=1.5, font=2)
text(x = 550, y = 1400, labels = "Empirical Results", xpd = NA, cex=1.5, font=1)
text(x = 550, y = 850, labels = "Simulation Results", xpd = NA, cex=1.5, font=1)
text(x = 0, y = 400, labels = "C", xpd = NA, cex=1.5, font=2)
dev.off()
library(tableone)
library(readxl)
# Windows
setwd("C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/")
#dat <- read_xlsx("./data/raw/DataElif.xlsx")
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
# Education Years will be added
varsToNum <- c("age", "ap", "AgeOfOnset", "DoI")
# First trim whitespace
subj_table[varsToNum] <- lapply(subj_table[varsToNum], function(x) as.numeric(trimws(x)))
varsToFactor <- c("marriage", "group", "sex")
subj_table[varsToFactor] <- lapply(subj_table[varsToFactor], function(x) as.factor(trimws(x)))
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"))
ifelse(subj_table$sex==1,"M", "F")
subj_table$sex
factor(ifelse(subj_table$sex==1,"M", "F"))
subj_table$sex <- factor(ifelse(subj_table$sex==1,"M", "F"))
subj_table$group <- factor(ifelse(subj_table$group==1,"SZ", "HC"))
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"))
tab <- CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"))
tab_print <- print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
tab_print
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
test = FALSE)
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
test = TRUE,
testApprox = chisq.test)
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
test = TRUE,
testApprox = chisq.test,
testExact = fisher.test)
CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
smd = TRUE)
print(tab, quote = TRUE, noSpaces = TRUE, printToggle = FALSE)
tab <- CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
smd = TRUE)
print(tab, quote = TRUE, noSpaces = TRUE, printToggle = FALSE)
print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
install.packages("flextable")
library(flextable   )
flextable::flextable(as.data.frame(tab_print))
tab
tab_print <- print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE, test=FALSE)
tab <- CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
smd = TRUE)
tab_print <- print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE, test=FALSE)
tab_df <- as.data.frame(tab_print)
tab_df$Variable <- rownames(tab_df)
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab1_df)
flextable(tab_df)
tab <- CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
smd = TRUE)
tab_print <- print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
tab_df <- as.data.frame(tab_print)
tab_df
colnames(tab_df)
library(tidyverse)
as.data.frame(tab_print) %>% select(c(1,3))
as.data.frame(tab_print) %>% select(c(1,2,3))
subj_table
str(subj_table)
tab1_df$Variable
tab_df$Variable
tab_df <- as.data.frame(tab_print) %>% select(c(1,2,3))
tab_df$Variable <- rownames(tab_df)
Variable
tab_df$Variable
custom_labels <- c(
"age" = "Age (years)",
"ap" = "CBZ",
"AgeOfOnset" = "Age of Onset",
"DoI" = "Duration of Illness"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df$Variable
tab_df$Variable
tab_df$Variable <- rownames(tab_df)
tab_df$Variable
custom_labels <- c(
"n" = "Number of Subject",
"age" = "Age (years)",
"ap" = "CBZ",
"AgeOfOnset" = "Age of Onset",
"DoI" = "Duration of Illness",
"sex" = "sex"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df$Variable
tab_df$Variable <- rownames(tab_df)
custom_labels <- c(
"n" = "Number of Subject",
"age (mean (SD))" = "Age (mean (SD))",
"ap" = "CBZ",
"AgeOfOnset" = "Age of Onset",
"DoI" = "Duration of Illness",
"sex" = "sex"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df$Variable
tab_df$Variable <- rownames(tab_df)
custom_labels <- c(
"n" = "Number of Subject",
"age (mean (SD))" = "Age (mean (SD))",
"ap (mean (SD))" = "CBZ (mean (SD))",
"AgeOfOnset (mean (SD))" = "Age of Onset (mean (SD))",
"DoI (mean (SD))" = "Duration of Illness (mean (SD))",
"sex = M (%)" = "sex = M (%)"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df$Variable
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab_df)
flextable(tab1_df) |>
autofit() |>
theme_vanilla()
flextable(tab_df) |>
autofit() |>
theme_vanilla()
tab_df
colnames(tab1_df) <- sub("^HC$", "Control", colnames(tab1_df))
colnames(tab_df) <- sub("^HC$", "Control", colnames(tab1_df))
# Rename columns
colnames(tab_df) <- sub("^HC$", "Control", colnames(tab_df))
colnames(tab_df) <- sub("^SZ$", "Schizophrenia", colnames(tab_df))
tab_df$Variable <- rownames(tab_df)
custom_labels <- c(
"n" = "Number of Subject",
"age (mean (SD))" = "Age (mean (SD))",
"ap (mean (SD))" = "CBZ (mean (SD))",
"AgeOfOnset (mean (SD))" = "Age of Onset (mean (SD))",
"DoI (mean (SD))" = "Duration of Illness (mean (SD))",
"sex = M (%)" = "sex = M (%)"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab_df) |>
autofit() |>
theme_vanilla()
flextable(tab_df) |>
set_header_labels(p = as_paragraph(as_i("p"))) |>
autofit() |>
theme_vanilla()
flextable(tab_df) |>
set_header_labels(p = as_paragraph(as_i("p"))) |>
autofit() |>
theme_vanilla()
flextable(tab_df) |>
autofit() |>
theme_vanilla()
tab_df
sz_only_vars <- c("CBZ (mean (SD))",
"Age of Onset (mean (SD))",
"Duration of Illness (mean (SD))")
# Set Control and p columns to NA for those rows
tab_df[tab_df$Variable %in% sz_only_vars, "Control"] <- NA
tab_df[tab_df$Variable %in% sz_only_vars, "p"] <- NA
tab_df[is.na(tab_df)] <- "-"
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab_df) |>
autofit() |>
theme_vanilla()
colnames(tab_df) <- sub("^HC$", "Control", colnames(tab_df))
colnames(tab_df) <- sub("^SZ$", "Schizophrenia", colnames(tab_df))
tab_df$Variable <- rownames(tab_df)
custom_labels <- c(
"n" = "Number of Subject",
"age (mean (SD))" = "Age (mean (SD))",
"ap (mean (SD))" = "CBZ (mean (SD))",
"AgeOfOnset (mean (SD))" = "Age of Onset (mean (SD))",
"DoI (mean (SD))" = "Duration of Illness (mean (SD))",
"sex = M (%)" = "sex = M (%)"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab_df) |>
autofit() |>
theme_vanilla()
setwd("C:/Users/kaank/OneDrive/Belgeler/GitHub/sch_pe/")
#dat <- read_xlsx("./data/raw/DataElif.xlsx")
subj_table <- read.csv("./data/raw/subjects_list.csv")
subj_table <- subset(subj_table, !(subj %in% c(9, 44)))
# Education Years will be added
varsToNum <- c("age", "ap", "AgeOfOnset", "DoI")
# First trim whitespace
subj_table[varsToNum] <- lapply(subj_table[varsToNum], function(x) as.numeric(trimws(x)))
varsToFactor <- c("marriage", "group", "sex")
subj_table[varsToFactor] <- lapply(subj_table[varsToFactor], function(x) as.factor(trimws(x)))
# For transforming the names
subj_table$sex <- factor(ifelse(subj_table$sex==1,"M", "F"))
subj_table$group <- factor(ifelse(subj_table$group==1,"SZ", "HC"))
tab <- CreateTableOne(vars = c("age", "ap", "AgeOfOnset", "DoI", "sex"),
strata = "group",
data = subj_table,
factorVars = c("sex"),
smd = TRUE)
tab_print <- print(tab, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
tab_df <- as.data.frame(tab_print) %>% select(c(1,2,3))
# Rename columns
colnames(tab_df) <- sub("^HC$", "Control", colnames(tab_df))
colnames(tab_df) <- sub("^SZ$", "Schizophrenia", colnames(tab_df))
tab_df$Variable <- rownames(tab_df)
custom_labels <- c(
"n" = "Number of Subject",
"age (mean (SD))" = "Age (mean (SD))",
"ap (mean (SD))" = "CBZ (mean (SD))",
"AgeOfOnset (mean (SD))" = "Age of Onset (mean (SD))",
"DoI (mean (SD))" = "Duration of Illness (mean (SD))",
"sex = M (%)" = "sex = M (%)"
)
tab_df$Variable <- custom_labels[tab_df$Variable]
tab_df <- tab_df[, c("Variable", setdiff(names(tab_df), "Variable"))]
library(flextable)
flextable(tab_df) |>
autofit() |>
theme_vanilla()
tab_df
tab_df[2,4]
